import discord
from discord import app_commands
from discord.ext import commands
import random
from data_manager import get_user, update_balance, add_exp, get_level_info

choices_dict = {
    "b·∫ßu": "üçê",
    "cua": "ü¶Ä",
    "t√¥m": "ü¶ê",
    "c√°": "üêü",
    "nai": "ü¶å",
    "g√†": "üêì"
}

async def autocomplete_choice(interaction: discord.Interaction, current: str):
    return [
        app_commands.Choice(name=f"{name} {emoji}", value=name)
        for name, emoji in choices_dict.items()
        if current.lower() in name.lower()
    ]

class BauCua(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="baucua", description="Ch∆°i mini game b·∫ßu cua")
    @app_commands.describe(
        amount="S·ªë ti·ªÅn b·∫°n mu·ªën c∆∞·ª£c",
        choice="Ch·ªçn b·∫ßu / cua / t√¥m / c√° / nai / g√†"
    )
    @app_commands.autocomplete(choice=autocomplete_choice)
    async def baucua(self, interaction: discord.Interaction, amount: int, choice: str):
        await interaction.response.defer()
        user_id = interaction.user.id
        user = get_user(user_id)
        balance = user.get("money", 0)

        choice = choice.lower()
        if choice not in choices_dict:
            await interaction.followup.send(
                f"‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! H√£y ch·ªçn m·ªôt trong: {', '.join(choices_dict.keys())}",
                ephemeral=True
            )
            return

        if amount <= 0:
            await interaction.followup.send("‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
            return

        if amount > balance:
            await interaction.followup.send("‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c!", ephemeral=True)
            return

        result = random.choices(list(choices_dict.keys()), k=3)
        win_count = result.count(choice)

        if win_count > 0:
            winnings = amount * win_count
            new_balance = update_balance(user_id, winnings)
            outcome_text = f"‚úÖ B·∫°n th·∫Øng {winnings} xu!"
        else:
            new_balance = update_balance(user_id, -amount)
            outcome_text = f"‚ùå B·∫°n ƒë√£ thua {amount} xu!"

        # Th√™m EXP m·ªói l·∫ßn ch∆°i
        exp, level = add_exp(user_id, 30)
        level_info = get_level_info(user_id)

        embed = discord.Embed(
            title="üé≤ B·∫ßu Cua K·∫øt Qu·∫£",
            description=(
                f"K·∫øt qu·∫£: {' '.join(choices_dict[r] for r in result)}\n"
                f"{outcome_text}\n\n"
                f"üí∞ S·ªë d∆∞: **{new_balance} xu**\n"
                f"‚≠ê EXP: **{level_info['exp']} / {level_info['next_level_exp']}**\n"
                f"üèÖ C·∫•p ƒë·ªô: **{level_info['level']}**"
            ),
            color=discord.Color.green() if win_count > 0 else discord.Color.red()
        )
        await interaction.followup.send(embed=embed)

async def setup(bot: commands.Bot):
    await bot.add_cog(BauCua(bot))
