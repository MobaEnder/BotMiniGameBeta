import discord
from discord import app_commands
from discord.ext import commands
import random
from datetime import datetime, timedelta
import json
import os

DATA_FILE = "data/users.json"

JOBS = {
		"n√¥ng d√¢n": (20, 50),
		"l·∫≠p tr√¨nh vi√™n": (50, 100),
		"ca sƒ©": (40, 90),
		"ƒë·∫ßu b·∫øp": (30, 70),
		"game th·ªß": (45, 95),
		"geysax": (150, 205),
}

# G·ª£i √Ω ngh·ªÅ hi·ªÉn th·ªã emoji
JOB_CHOICES = {
		"n√¥ng d√¢n": "üë®‚Äçüåæ N√¥ng d√¢n",
		"l·∫≠p tr√¨nh vi√™n": "üíª L·∫≠p tr√¨nh vi√™n",
		"ca sƒ©": "üé§ Ca sƒ©",
		"ƒë·∫ßu b·∫øp": "üë®‚Äçüç≥ ƒê·∫ßu b·∫øp",
		"game th·ªß": "üéÆ Game th·ªß",
		"geysax": "üçë Geysax",
}

def load_data():
		if not os.path.exists(DATA_FILE):
				with open(DATA_FILE, "w") as f:
						json.dump({}, f)
		with open(DATA_FILE, "r") as f:
				return json.load(f)

def save_data(data):
		with open(DATA_FILE, "w") as f:
				json.dump(data, f, indent=4)

def get_user(user_id):
		data = load_data()
		uid = str(user_id)
		if uid not in data:
				data[uid] = {
						"money": 0,
						"last_work": "1970-01-01T00:00:00",
						"job": None
				}
				save_data(data)
		return data[uid]

def update_user(user_id, key, value):
		data = load_data()
		uid = str(user_id)
		user = get_user(user_id)
		user[key] = value
		data[uid] = user
		save_data(data)

def update_money(user_id, amount):
		data = load_data()
		uid = str(user_id)
		user = get_user(user_id)
		user["money"] += amount
		data[uid] = user
		save_data(data)
		return user["money"]

def can_work(user_id):
		user = get_user(user_id)
		last_time = datetime.fromisoformat(user.get("last_work", "1970-01-01T00:00:00"))
		return datetime.utcnow() - last_time >= timedelta(hours=1)

class JobSystem(commands.Cog):
		def __init__(self, bot):
				self.bot = bot

		@app_commands.command(name="setjob", description="Ch·ªçn ngh·ªÅ nghi·ªáp ƒë·ªÉ l√†m vi·ªác")
		@app_commands.describe(job="Ch·ªçn ngh·ªÅ nghi·ªáp c·ªßa b·∫°n")
		async def setjob(self, interaction: discord.Interaction, job: str):
				if job not in JOBS:
						return await interaction.response.send_message(
								"‚ùå Ngh·ªÅ b·∫°n ch·ªçn kh√¥ng h·ª£p l·ªá. H√£y d√πng g·ª£i √Ω!",
								ephemeral=True
						)

				update_user(interaction.user.id, "job", job)
				await interaction.response.send_message(f"‚úÖ B·∫°n ƒë√£ ch·ªçn ngh·ªÅ **{JOB_CHOICES[job]}**.")

		@setjob.autocomplete("job")
		async def job_autocomplete(self, interaction: discord.Interaction, current: str):
				return [
						app_commands.Choice(name=emoji_name, value=job_key)
						for job_key, emoji_name in JOB_CHOICES.items()
						if current.lower() in job_key.lower()
				][:25]

		@app_commands.command(name="work", description="L√†m vi·ªác ƒë·ªÉ ki·∫øm ti·ªÅn theo ngh·ªÅ ƒë√£ ch·ªçn")
		async def work(self, interaction: discord.Interaction):
				user = get_user(interaction.user.id)
				job = user.get("job")

				if not job:
						return await interaction.response.send_message(
								"‚ùå B·∫°n ch∆∞a ch·ªçn ngh·ªÅ! D√πng l·ªánh `/setjob` ƒë·ªÉ ch·ªçn.",
								ephemeral=True
						)

				if not can_work(interaction.user.id):
						return await interaction.response.send_message(
								"üïí B·∫°n c·∫ßn ngh·ªâ ng∆°i m·ªôt ch√∫t! H√£y th·ª≠ l·∫°i sau 1 gi·ªù.",
								ephemeral=True
						)

				salary = random.randint(*JOBS[job])
				new_balance = update_money(interaction.user.id, salary)
				update_user(interaction.user.id, "last_work", datetime.utcnow().isoformat())

				await interaction.response.send_message(
						f"üíº B·∫°n ƒë√£ l√†m vi·ªác v·ªõi vai tr√≤ **{JOB_CHOICES[job]}** v√† nh·∫≠n ƒë∆∞·ª£c **{salary} xu**!\n"
						f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i: {new_balance} xu."
				)

async def setup(bot):
		await bot.add_cog(JobSystem(bot))
